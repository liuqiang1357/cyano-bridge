{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils.ts","webpack:///./src/CyanoBridge.ts","webpack:///./src/client/proxy.ts","webpack:///./src/client/smartcontract.ts","webpack:///./src/client/index.ts","webpack:///./src/client/asset.ts","webpack:///./src/client/identity.ts","webpack:///./src/client/message.ts","webpack:///./src/client/qrcode.ts","webpack:///./src/client/provider.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","formatArgItem","type","map","v","val","k","keys","Error","JSON","stringify","makeInvokeFunction","operation","args","params","push","randomId","Math","random","toString","substring","src_CyanoBridge","[object Object]","timeout","this","version","handlers","injected","pendingMsgs","req","id","Promise","resolve","reject","uri","btoa","encodeURIComponent","sendMessage","handleMessageEvent","action","needTimeout","msg","parse","decodeURIComponent","atob","handler","listener","offMessage","e","res","parseMessage","data","window","document","addEventListener","removeEventListener","postMessage","checkInterval","setInterval","originalPostMessage","forEach","clearInterval","that","event","message","setTimeout","cb","registerClient","async","request","scApi","scriptHash","payer","config","login","url","functionParams","invokeConfig","contractHash","functions","gasPrice","gasLimit","length","api","asset","getAccount","from","to","amount","invoke","identity","getIdentity","authentication","authorization","ontid","publicKey","invokeRead","signMessage","smartContract","qrcode","provider","getProvider"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export function formatArgItem(p: any) {\n    if (p.type === 'Boolean' || p.type === 'Integer') {\n        return {\n            name: p.name,\n            value: p.value\n        };\n    } else if (p.type === 'String' || p.type === 'ByteArray' || p.type === 'Long' || p.type === 'Address') {\n        return {\n            name: p.name,\n            value: p.type + ':' + p.value\n        };\n    } else if (p.type === 'Array') {\n        return {\n            name: p.name,\n            value: p.value.map((v: any) => formatArgItem(v))\n        };\n    } else if (p.type === 'Map') {\n        const val: any = {};\n        for (const k of Object.keys(p.value)) {\n            val[k] = formatArgItem(p.value[k]);\n        }\n        return {\n            name: p.name,\n            value: val\n        };\n    } else {\n        throw new Error('Invalid parmeter type: ' + JSON.stringify(p));\n    }\n}\n\nexport function makeInvokeFunction(operation: string, args: any[]) {\n    const params = [];\n    for (const p of args) {\n        params.push(formatArgItem(p));\n    }\n    const obj = {\n        operation,\n        args: params\n    };\n    return obj;\n}\n\nexport function randomId() {\n    return Math.random().toString(36).substring(2, 10);\n}\n\nexport function ready(callback: () => void) {\n    if (typeof document === 'undefined') {\n        throw new Error('document-ready only runs in the browser');\n    }\n    const state = document.readyState;\n    if (state === 'complete' || state === 'interactive') {\n        return setTimeout(callback, 0);\n    }\n\n    document.addEventListener('DOMContentLoaded', function onLoad() {\n        callback();\n    });\n}","import { randomId } from './utils';\n\nclass CyanoBridge {\n\n    version: string;\n    listener: (e: any) => any;\n    timeout: number = 3000;\n    handlers: any;\n    checkInterval: number;\n    injected: boolean;\n    pendingMsgs: any [];\n\n    constructor(timeout?: number) {\n        this.version = 'v1.0.0';\n        this.handlers = {};\n        if (timeout) {\n            this.timeout = timeout;\n        }\n        this.injected = false;\n        this.pendingMsgs = [];\n    }\n\n    call(req: any) {\n        const id = randomId();\n        req.id = id;\n        return new Promise((resolve, reject) => {\n            const msg = btoa(encodeURIComponent(JSON.stringify(req)));\n            const uri = 'ontprovider://ont.io?params=' + msg;\n            this.sendMessage(uri);\n            this.handleMessageEvent(id, resolve, reject, req.action, req.needTimeout);\n        });\n    }\n\n    invokeRead() {\n        throw new Error('invokeRead not supported yet.');\n    }\n\n    parseMessage(msg: string): any {\n        return JSON.parse(decodeURIComponent(atob(msg)));\n    }\n\n    onMessage(handler: (res: any) => {}) {\n        if (this.listener) {\n            this.offMessage();\n        }\n        const listener = (e: any) => {\n            const res = this.parseMessage(e.data);\n            handler(res);\n        };\n        window.document.addEventListener('message', listener);\n        this.listener = listener;\n    }\n\n    offMessage() {\n        window.document.removeEventListener('message', this.listener);\n    }\n\n    private sendMessage(msg: string) {\n        // provider will inject originalPostMessage method in js\n        // detect this method to decide when to send msssage\n        if (this.injected) {\n            window.postMessage(msg, '*');\n            return;\n        }\n        if (this.checkInterval) {\n            this.pendingMsgs.push(msg);\n            return;\n        }\n        this.checkInterval = window.setInterval(() => {\n            if ((window as any).originalPostMessage) {\n                window.postMessage(msg, '*');\n                this.injected = true;\n                this.pendingMsgs.forEach((m: string) => {\n                    window.postMessage(m, '*');\n                });\n                window.clearInterval(this.checkInterval);\n            }\n        }, 100);\n    }\n\n    private handleMessageEvent(\n        id: string,\n        resolve: any,\n        reject: any,\n        action: string,\n        needTimeout:\n        boolean = false\n        ) {\n        const that = this;\n        // tslint:disable-next-line:only-arrow-functions\n        const handler = function(event: any) {\n            const message = event.data;\n            if (!message) {\n                reject(event);\n            }\n            const res = that.parseMessage(message);\n            if (!res.id) {\n                reject('No message id');\n            }\n            if (!that.handlers[res.id]) {\n                reject('No message handler');\n            }\n            if (res.id !== handler.id) {\n                return;\n            }\n            document.removeEventListener('message', that.handlers[res.id]);\n            delete that.handlers[res.id];\n            if (res.action === action) {\n                resolve(res);\n            } else {\n                reject(res);\n            }\n        } as any;\n        handler.id = id;\n        this.handlers[id] = handler;\n        document.addEventListener('message', this.handlers[id]);\n        if (needTimeout) {\n            setTimeout(() => {\n                reject('Time out');\n            }, this.timeout);\n        }\n    }\n\n}\n\nexport default CyanoBridge;\n","import CyanoBridge from '../CyanoBridge';\n\nlet cb: CyanoBridge;\n\nexport function registerClient(timeout: number = 3000) {\n    cb = new CyanoBridge(timeout);\n}\n\nexport async function call(request: any) {\n    return cb.call(request);\n}\n\nexport const version = '1.0.0';\n","import { makeInvokeFunction } from '../utils';\nimport { call, version } from './proxy';\n\n// tslint:disable-next-line:one-variable-per-declaration\nexport const scApi = {\n    invoke(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer: string,\n        config?: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args) {\n            throw new Error('Invalid params.');\n        }\n        if (!params.payer) {\n            throw new Error('No payer.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invoke',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    },\n    invokeRead(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer?: string,\n        config?: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args) {\n            throw new Error('Invalid params.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invokeRead',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    },\n    invokePasswordFree(params: {\n        scriptHash: string,\n        operation: string,\n        args: any[],\n        gasPrice: number,\n        gasLimit: number,\n        payer: string,\n        config: {\n            login: boolean,\n            message: string,\n            url: string\n        }\n    }) {\n        if (!params.scriptHash || !params.operation || !params.args || params.args.length === 0) {\n            throw new Error('Invalid params.');\n        }\n\n        if (!params.payer) {\n            throw new Error('No payer.');\n        }\n\n        if (!params.config) {\n            params.config = {\n                login: true,\n                message: '',\n                url: ''\n            };\n        }\n        const functionParams = makeInvokeFunction(params.operation, params.args);\n        const req: any = {\n            action: 'invokePasswordFree',\n            version,\n            params: {\n                login: params.config.login,\n                url: params.config.url,\n                message: params.config.message,\n                invokeConfig: {\n                    contractHash: params.scriptHash,\n                    functions: [functionParams],\n                    payer: params.payer,\n                    gasPrice: params.gasPrice ? params.gasPrice : 500,\n                    gasLimit: params.gasLimit ? params.gasLimit : 20000\n                }\n            }\n        };\n        return call(req);\n    }\n};\n","import { assetApi as asset } from './asset';\nimport { identityApi as identity } from './identity';\nimport { messageApi as message } from './message';\nimport { providerApi as provider } from './provider';\nimport { qrcodeApi as qrcode } from './qrcode';\nimport { scApi as smartContract } from './smartcontract';\n\nimport { registerClient } from './proxy';\n\nconst api = {\n    asset,\n    identity,\n    message,\n    smartContract,\n    qrcode,\n    provider\n};\n\nexport { registerClient, api};\n","import { call, version } from './proxy';\nimport { scApi } from './smartcontract';\n\nexport type Asset = 'ONT' | 'ONG' | string;\n\nexport const assetApi = {\n    getAccount(params?: { dappName: string, dappIcon: string }) {\n        const req = {\n            action: 'getAccount',\n            version,\n            params,\n            needTimeout: true\n        };\n        return call(req);\n    },\n\n    transfer({ from, to, asset, amount, gasPrice, gasLimit }:\n        { from: string, to: string; asset: Asset; amount: number | string, gasPrice?: number, gasLimit?: number }) {\n        const ONT_CONTRACT = '0100000000000000000000000000000000000000';\n        const ONG_CONTRACT = '0200000000000000000000000000000000000000';\n        const params = {\n            scriptHash: asset === 'ONT' ? ONT_CONTRACT : ONG_CONTRACT,\n            operation: 'transfer',\n            args: [\n                {\n                    name: 'from',\n                    type: 'Address',\n                    value: from\n                },\n                {\n                    name: 'to',\n                    type: 'Address',\n                    value: to\n                },\n                {\n                    name: 'amount',\n                    type: 'Long',\n                    value: amount // Handler for number and string is the same\n                }\n            ],\n            gasPrice: gasPrice = 500,\n            gasLimit: gasLimit = 20000,\n            payer: from\n        };\n        return scApi.invoke(params);\n    }\n\n};\n","import { call, version } from './proxy';\nimport { scApi } from './smartcontract';\n// const subactions = ['getRegistryOntidTx', 'faceRecognition', 'submit',\n//     'requestAuthorization', 'getAuthorizationInfo', 'decryptClaim', 'deleteOntid', 'exportOntid];\n\nexport const identityApi = {\n    getIdentity(params?: { dappName: string, dappIcon: string }) {\n        const req = {\n            action: 'getIdentity',\n            version,\n            params,\n            needTimeout: true\n        };\n        return call(req);\n    },\n    authentication(\n        params: {\n            subaction: string\n        }) {\n        // if (!params || !params.subaction) {\n        //     throw new Error('Invalid params. \"subaction\" missing.');\n        // }\n        // if (subactions.findIndex((item) => item === params.subaction) < 0) {\n        //     throw new Error('Invalid params. Wrong \"subaction\" ' + params.subaction);\n        // }\n        const req = {\n            action: 'authentication',\n            version,\n            params\n        };\n        return call(req);\n    },\n\n    authorization(\n        params: {\n            subaction: string\n            // seqno: string,\n            // user_ontid: string,\n            // app_ontid: string,\n            // to_ontid: string,\n            // callback: string,\n            // auth_template: string\n        }\n    ) {\n        const req = {\n            action: 'authorization',\n            version,\n            params\n        };\n        // if (!params || !params.subaction) {\n        //     throw new Error('Invalid params. \"subaction\" missing.');\n        // }\n        // if (subactions.findIndex((item) => item === params.subaction) < 0) {\n        //     throw new Error('Invalid params. Wrong \"subaction\" ' + params.subaction);\n        // }\n        return call(req);\n    },\n\n    registerOntId({ontid, publicKey, payer, gasPrice, gasLimit}:\n         {ontid: string, publicKey: string, payer: string, gasPrice?: number, gasLimit?: number}) {\n        const ONTID_CONTRACT = '0300000000000000000000000000000000000000';\n        const params = {\n            scriptHash: ONTID_CONTRACT,\n            operation: 'regIDWithPublicKey',\n            args: [\n                {\n                    name: 'ontid',\n                    type: 'String',\n                    value: ontid\n                },\n                {\n                    name: 'pk',\n                    type: 'ByteArray',\n                    value: publicKey\n                }\n            ],\n            gasPrice: gasPrice = 500,\n            gasLimit: gasLimit = 20000,\n            payer\n        };\n        return scApi.invoke(params);\n    },\n\n    getDDO(ontid: string) {\n        const ONTID_CONTRACT = '0300000000000000000000000000000000000000';\n        const params = {\n            scriptHash: ONTID_CONTRACT,\n            operation: 'getDDO',\n            args: [\n                {\n                    name: 'ontid',\n                    type: 'String',\n                    value:  ontid\n                }\n            ],\n            gasPrice: 500,\n            gasLimit: 20000\n        };\n        return scApi.invokeRead(params);\n    }\n};\n","import { call, version } from './proxy';\n\nexport const messageApi = {\n    signMessage(params: {message: string}) {\n        const req = {\n            action: 'signMessage',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    },\n\n    login(params: {\n        message: string,\n        type: string,\n        dappName: string,\n        dappIcon: string,\n        expired: number,\n        callback: string\n    }) {\n        if (!params.message || typeof params.message !== 'string') {\n            throw new Error('Parameter for login must contain a message.');\n        }\n        if (!params.type) {\n            params.type = 'account';\n        }\n        const req = {\n            action: 'login',\n            version,\n            params,\n            needTimeout: false\n        };\n        return call(req);\n    }\n};\n","import { randomId } from '../utils';\nimport { version } from './proxy';\n\nexport const qrcodeApi = {\n    login(params: {\n        type: string,\n        dappName: string,\n        dappIcon: string,\n        message: string,\n        expire: number,\n        callback: string\n    }): string {\n        if (params.type !== 'ontid' && params.type !== 'account') {\n            throw new Error('Invalid parameter type ' + params.type);\n        }\n        const req = {\n            action: 'login',\n            version,\n            id: randomId(),\n            params\n        };\n        return JSON.stringify(req);\n    },\n\n    invoke(params: {\n        login: boolean,\n        callback: string,\n        qrcodeUrl: string\n    }): string {\n        const req = {\n            action: 'invoke',\n            version,\n            id: randomId(),\n            params\n        };\n        return JSON.stringify(req);\n    }\n};\n","import { call, version } from './proxy';\n\nexport const providerApi = {\n    getProvider() {\n        const req = {\n            action: 'getProvider',\n            version,\n            needTimeout: true\n        };\n        return call(req);\n    }\n};\n"],"sourceRoot":""}